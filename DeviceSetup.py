#!/usr/bin/env python2.7
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.19
#  in conjunction with Tcl version 8.6
#    Nov 23, 2018 10:16:19 PM CST  platform: Linux
import subprocess, os, string, time, sys ,getopt, ConfigParser
try:
    import xml.etree.cElementTree as ET
except ImportError:
    import xml.etree.ElementTree as ET

a=sys.argv
print(a)
#for i in range(len(a)):
 #   print(a[i])




devicesID=sys.argv[1]
#SSID=sys.argv[2]
#PSK=sys.argv[3]


###################Select Wifi#########################
wifimode=sys.argv[2]
wifimode=int(wifimode.split("SSID:",)[1])
print(wifimode)
config = ConfigParser.ConfigParser()
config.read('/CTS_tool/for_pythonUI/WiFiconfig.ini')

if wifimode == 0:

	SSID= config.get('Section_A', 'SSID')#GET "Value_ABC"
	PSK = config.get('Section_A', 'PSK')#GET "Value_ABC"

elif wifimode == 1:
	SSID = config.get('Section_B', 'SSID')#GET "Value_ABC"
	PSK = config.get('Section_B', 'PSK')#GET "Value_ABC"
elif wifimode == 2:
	SSID = config.get('Section_C', 'SSID')#GET "Value_ABC"
	PSK = config.get('Section_C', 'PSK')#GET "Value_ABC"


devicesID=devicesID.split("serial:",)[1]
print("devicesID:"+devicesID)
#SSID=SSID.split("SSID:",)[1]
print("SSID:"+SSID)
#PSK=PSK.split("PSK:",)[1]
print("PSK:"+PSK)



deviceID = str(devicesID)



#################Media apache2 local ###############################
##Media_Local_IP = config.get('Section_Media IP', 'Media_Local_IP')#GET "Value_ABC"
#print(Media_Local_IP)

##download = ['GtsMedia-dynamic-config-1.0.txt', 'CtsMedia.txt']

##for i in range(len(download)):
##	GtsMediadynamic=subprocess.Popen(
##		str("wget -N  http://"+str(Media_Local_IP)+"/CTS_tool/Media/"+ str(download[i])+"  -P /CTS_tool/Media/ -t 2").split())
##	print(download[i]) 
#		shellscript = subprocess.Popen(serialCommand , shell=False)



def get_all_item(item):
	while True:
		output=subprocess.check_output("adb -s "+devicesID+" exec-out uiautomator dump /dev/tty", shell=True)
		if "ERROR: null root node returned by UiTestAutomationBridge" in output:
			time.sleep(1)
		else:
			tree =str(output.replace("UI hierchary dumped to: /dev/tty",""))
			break;

	tree = ET.ElementTree(ET.fromstring(tree))
	dic = {}
	
	for elem in tree.iter():
	
		try:
			if elem.attrib['text'] :#!= "":
				text=elem.attrib['text']
				pos =elem.attrib['bounds'] #.replace("[","").replace("]",",")				
			#elif elem.attrib['resource-id'] == 'android:id/button1':
			#	dic['text']='Pass_icon'
			#if dic['text'] != "":
			#	x = (int(get_bound(elem.attrib['bounds'])[0]) + int(get_bound(elem.attrib['bounds'])[2])) / 2
			#	y = (int(get_bound(elem.attrib['bounds'])[1]) + int(get_bound(elem.attrib['bounds'])[3])) / 2
			#	dic['bounds']= str(x) + " " + str(y)
			#	print text
			#	print pos
				dic[elem.attrib['text']]=elem.attrib['bounds'] #.replace("[","").replace("]"," ").replace(","," ")	)				
		except:
			pass

#	print dic
	check_word=['save','SAVE','Save','Enter', # [0:5]
	'WPA/WPA2-Personal','WPA/WPA2 PSK', #[4:6]
	'none','None', # [6:9]
	'Password','password' # [9:11]
	]
	if item == "SAVE":
		check_word =check_word[0:4]
	elif item == "WPA2":
		check_word =check_word[4:6]
	elif item == "None":
		check_word =check_word[6:8]
	elif item == "Password":
		check_word =check_word[8:10]	

#	print check_word
	for x in range(len(check_word)):
		if dic.has_key(check_word[x]):
			print check_word[x]
			item = check_word[x]
			touch=dic[item].replace("[", "").replace("]", " ").replace(",", " ").split()
			if item == "Password" and "password":
				touch = str(((int(touch[0])) + (int(touch[2])))  / 2 )+" "+ str(((int(touch[1])) + (int(touch[3]) + int(200)))  / 2 )  # X , Y
				subprocess.check_output(
				str("adb -s " + devicesID + " shell input tap "+touch).split())
				#print str(touch) + " X Y" #點選位置
			else:
				touch = str(((int(touch[0])) + (int(touch[2])))  / 2 )+" "+ str(((int(touch[1])) + (int(touch[3])))  / 2 )  # X , Y

				subprocess.check_output(
				str("adb -s " + devicesID + " shell input tap "+touch).split())
				#print str(touch) + " X Y" #點選位置
			break
		else:
			pass


#-----------------------------------------------------------------#
screenlockkeyeventhome=subprocess.check_output(
		str("adb -s " + deviceID + " shell input keyevent 82").split())
#screenlockkeyeventhome=subprocess.check_output(
#		str("adb -s " + deviceID + " shell input keyevent 82").split())
time.sleep(1.5)




	#--------------------WIFISeupt-------------------------#
wifissid=subprocess.check_output(
		str("adb -s " + devicesID + " shell am start  -n com.android.settings/.wifi.WifiDialogActivity").split())
time.sleep(1.5)

wifissid=subprocess.check_output(
		str("adb -s " + devicesID + " shell  input text " + str(SSID)  ).split())
time.sleep(1.5)	
item="None"

print get_all_item(item)
time.sleep(1.5)	

item="WPA2"

print get_all_item(item)
time.sleep(1.5)	


wifissid=subprocess.check_output(
		str("adb -s " + devicesID + " shell input keyevent 61").split())
time.sleep(1.5)
wifissid=subprocess.check_output(
		str("adb -s " + devicesID + " shell input keyevent 61").split())
time.sleep(1.5)



item="Password" 
print get_all_item(item)
	
	#time.sleep(1.5)	
	#wifissid=subprocess.check_output(
	#		str("adb -s " + devicesID + " shell input keyevent 61").split())

wifissid3=subprocess.check_output(
		str("adb -s " + devicesID + " shell  input text "+str(PSK)).split())
time.sleep(1.5)		 

item="SAVE"

print get_all_item(item)
time.sleep(1)	

	#--------------------GPS-------------------------#

screenlockkeyeventhome=subprocess.check_output(
		str("adb -s " + deviceID + " shell input keyevent 03").split())
time.sleep(1.5)
locationsetup=subprocess.check_output(
		str("adb -s " + deviceID + " shell settings put secure location_providers_allowed +network").split())
locationsetup2=subprocess.check_output(
		str("adb -s " + deviceID + " shell settings put secure location_providers_allowed +gps").split())
	#--------------------Screenlock-------------------------#

screenlock=subprocess.check_output(
		str("adb -s " + deviceID + " shell am start -n  com.android.settings/.password.ScreenLockSuggestionActivity").split())
time.sleep(1.5)
item="None" 
print get_all_item(item)
time.sleep(1.5)	
adminfinddeviceoff=subprocess.check_output(
		str("adb -s " + deviceID + " shell am start -n  com.google.android.gms/.security.settings.AdmSettingsActivity").split())
time.sleep(1.5)
screenlockkeyevent1=subprocess.check_output(
		str("adb -s " + deviceID + " shell input keyevent 23").split())
time.sleep(1.5)

	#--------------------setupsomething-------------------------#

time_12_24=subprocess.check_output(
		str("adb -s " + deviceID + " shell settings put system time_12_24 12").split())
inputmethod=subprocess.check_output(
		str("adb -s " + deviceID + " shell settings put secure default_input_method com.android.inputmethod.latin.LatinIME").split())
inputmethod=subprocess.check_output(
		str("adb -s " + deviceID + " shell settings put secure default_input_method com.google.android.inputmethod.latin").split())
callvolume=subprocess.check_output(
		str("adb -s " + deviceID + " shell service call audio 7 i32 0").split())
ringvolume=subprocess.check_output(
		str("adb -s " + deviceID + " shell service call audio 7 i32 2").split())
mediavolume=subprocess.check_output(
		str("adb -s " + deviceID + " shell service call audio 7 i32 3").split())
alarmvolume=subprocess.check_output(
		str("adb -s " + deviceID + " shell service call audio 7 i32 4").split())
language=subprocess.check_output(
		str("adb -s " + deviceID + " shell settings put system system_locales en-US").split())
scree_off=subprocess.check_output(
		str("adb -s " + deviceID + " shell settings put system screen_off_timeout 4800000 ").split())
brightness_mode=subprocess.check_output(
		str("adb -s " + deviceID + " shell settings put system screen_brightness_mode 0").split())
brightness=subprocess.check_output(
		str("adb -s " + deviceID + " shell settings put system screen_brightness 10").split())
brightness=subprocess.check_output(
		str("adb -s " + deviceID + " shell svc power stayon true").split())

screenlockkeyeventhome=subprocess.check_output(
		str("adb -s " + deviceID + " shell am start -n com.android.settings/.wifi.WifiPickerActivity").split())
enablewifi=subprocess.check_output(
		str("adb -s " + deviceID + "  shell svc wifi disable").split()) 
time.sleep(1.5)	
enablewifi=subprocess.check_output(
		str("adb -s " + deviceID + "  shell svc wifi enable").split()) 
time.sleep(1.5)	
enablemobiledata=subprocess.check_output(
		str("adb -s " + deviceID + "  shell svc data enable").split())
time.sleep(1.5)	




#	lockscreenArray=[23,23]
#	adminArray=[23]
#	wifiSSIDArray[343,43,43]
